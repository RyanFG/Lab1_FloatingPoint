library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity exponentpath is
    port (
        clk : in std_logic;
        rst : in std_logic;
        loadRE,loadAE,loadBE : in std_logic;
        addsig,carryIn,s,carryOut : in std_logic;
        Ex,Ey :in std_logic_vector (6 downto 0);
        Addexpby : in std_logic_vector (2 downto 0);
        resetBar,load,clock  : in std_logic;
        o_RE : out std_logic_vector (6 downto 0)        
    );
end exponentpath;

architecture rtl of exponentpath is
 signal i_RE1, i_RE2, AE ,BE : std_logic_vector (7 downto 0);
 component eightbitregister is
   port (
    resetBar, load, clock: IN STD_LOGIC;
	inValues: IN STD_LOGIC_VECTOR(7 downto 0);
	outValues: OUT STD_LOGIC_VECTOR(7 downto 0)
   );
 end component;
   component eightBitCLA is
     port (
        a,b: IN STD_LOGIC_VECTOR(7 downto 0);
		addOrSub: IN STD_LOGIC;
		carryIn: IN STD_LOGIC;
		s: OUT STD_LOGIC_VECTOR(7 downto 0);
		carryOut: OUT STD_LOGIC
     );
   end component;
begin

eightbitregister_inst0: eightbitregister
port map (
  resetBar  => resetBar,
  load      => load,
  clock     => clock,
  inValues (6 downto 0)  => Ex (6 downto 0),
  inValues (7) => '0',
  outValues => AE
);
    
eightbitregister_inst1: eightBitRegister
port map (
  resetBar  => resetBar,
  load      => load,
  clock     => clock,
  inValues (6 downto 0)  => Ey (6 downto 0),
  inValues (7) => '0',
  outValues => BE
);

eightbitcla_inst0: eightBitCLA
port map (
  a        => AE,
  b        => BE,
  addOrSub => '0',
  carryIn  => '0',
  s        => i_RE1,
  carryOut => carryOut
);

eightbitcla_instCarry: eightBitCLA
port map (
  a        => i_RE1,
  b        => Addexpby,
  addOrSub => '0',
  carryIn  => '0',
  s        => i_RE1,
  carryOut => carryOut
);

eightbitcla_inst1: eightBitCLA
port map (
  a        => i_RE1,
  b        => "00111111",
  addOrSub => '1',
  carryIn  => '0',
  s        => i_RE2,
  carryOut => carryOut
);

eightbitregister_inst2: eightBitRegister
port map (
  resetBar  => resetBar,
  load      => load,
  clock     => clock,
  inValues  => i_RE2,
  outValues (6 downto 0) => o_RE (6 downto 0)
);

o_RE (6 downto 0) <= o_RE (6 downto 0);
end architecture;